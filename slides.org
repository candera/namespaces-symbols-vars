#+TITLE: Namespaces, Vars, and Symbols (Oh, My!)
#+AUTHOR: Craig Andera
#+EMAIL: craig@thinkrelevance.com

* Namespaces, Symbols, and Vars (Oh, My!)                       :title:slide:

# Note: things using this comment syntax will not be exported

# I want to talk about the fact that the basic evaluation model in
# Clojure is something that even people that have been programming in
# Clojure don't necessarily understand very well. I know that I didn't
# quite "get it" for my first few years.

# So what's the story? I think it might go something like: so you see
# this piece of code? Pretty simple, right? Well, there are a few
# things in here that give beginners trouble, like the namespace macro
# and understanding vars and symbols. One way to understand a
# technology is to write a version yourself. We don't have time to do
# that in a 50 minute talk, but what we can do is to take a tour of
# the concepts. When we're done, you should understand much better how
# Clojure handles three very important concepts: namespaces, vars, and
# symbols.

# So we start by showing Hello World, and commenting that everyone
# understands what the code does, but maybe not why. From there we
# talk about how code gets loaded by require, and about the syntax of
# require.

# Once the code is loaded, it's read. So we can talk about read, and
# how that turns characters into lists, strings, numbers, and symbols.
# We can talk about the evaluation rules for everything except
# symbols. To talk about those, we have to talk about what a symbol
# is.

# Symbols can have namespaces. So we talk about what a namespace is.
# That leads to talking about what vars are. That leads us to talking
# about refer, and - by extension - use. Then we can circle back
# around to the evaluation rules for symbols. Then we come back to the
# code again and we're done.

** Slides
*** But First, a Reaction to Rich's Keynote                     :slide:title:
*** Holy Shit!                                                  :title:slide:
*** Me                                                                :slide:
**** Craig Andera
**** @craigandera
**** craig@thinkrelevance.com

*** Intended Audience                                                 :slide:
**** People who have been using Clojure a bit
**** People who haven't written a book about it
**** Anyone who remains confused about =(ns)= syntax

*** The Big Pile of Code                                              :slide:

# The basic idea here is to do an analysis of this simple program:

#+begin_src clojure
  (ns hello
    (:require [clojure.string :as str]))

  (defn -main [& args]
    (println "hello" (str/join " and " args)))
#+end_src

*** What's Going On Here?                                             :slide:
**** A file gets loaded
**** It gets evaluated

*** Loading                                                           :slide:
**** Primary API for this is =require=
**** Takes ns name and finds a file on CLASSPATH
**** Turns text in file into Clojure data structures
**** Evaluates them
**** Also lets you provide an alias

*** Require                                                           :slide:

#+begin_src clojure
  ;; Load $CLASSPATH/net/cgrand/enlive_html.clj
  (require 'net.cgrand.enlive-html)

  ;; Still have to use namespaces
  (net.cgrand.enlive-html/render ...)
#+end_src

#+begin_src clojure
  ;; Load it and let us refer to it as html
  (require '[net.cgrand.enlive-html :as html])

  ;; Better, but still need namespace
  (html/render ...)
#+end_src


*** Evaluation                                                        :slide:
**** Many things in Clojure evaluate to themselves
***** Maps, sets, vectors, strings, numbers
**** Some things don't
***** Lists => invocations
***** Symbols => ??

*** What is a Symbol?                                                 :slide:
**** A name
**** With an optional namespace
**** Has no value

#+begin_src clojure
  foo       ; Unqualified symbol
  bar/foo   ; Symbol with namespace
#+end_src

*** What is a Namespace?                                              :slide:
**** *Conceptually*: A way to disambiguate names
**** *Concretely*: A mapping from symbols to
***** Java classes
***** Aliases
***** Vars

*** What is a Var?                                                    :slide:
**** An association between a name and a value
**** COMMENT Name is a symbol without a namespace
**** COMMENT A var with zero values is /unbound/
**** COMMENT Usually has one value: the /root/ value
**** COMMENT Can have a per-thread value, too
***** COMMENT Via =binding=, iff marked =^:dynamic=
**** Value is often a function
**** =def= creates a new var in the current namespace
***** Optionally associates a value

*** Creating a Var                                                    :slide:
#+begin_src clojure
  (ns some.name)

  ;; Var #'some.name/foo is unbound
  (def foo)

  ;; Var #'some.name/bar has function value
  (defn bar [x] (+ 2 x))
#+end_src

*** Viewing Namespace Mappings                                        :slide:

# The \nbsp in the table entries is to prevent org-mode from treating
# the equals sign as indicating a spreadsheet calculation.

| Function           | Description                       |
|--------------------+-----------------------------------|
| \nbsp =ns-map=     | Map of all vars and classes in NS |
| \nbsp =ns-publics= | Map of symbols to public vars     |
| \nbsp =ns-imports= | Map of symbols to Java classes    |
| \nbsp =ns-interns= | Map of symbols to this NS's vars  |
| \nbsp =ns-aliases= | Map of aliases to namespaces |
| \nbsp =ns-refers=  | Map of symbols to referred vars   |

*** Viewing Namespace Mappings                                        :slide:

#+begin_src clojure
  (ns-map 'user)

  ;; {sorted-map #'clojure.core/sorted-map,
  ;;  read-line #'clojure.core/read-line
  ;;  ...}
#+end_src

#+begin_src clojure
  (ns-imports 'user)

  ;; {ProcessBuilder java.lang.ProcessBuilder,
  ;;  Enum java.lang.Enum,
  ;;  ...}
#+end_src


*** Where Am I?                                                       :slide:
**** Use =in-ns= to switch namespaces
***** Creates a new one if necessary
***** Mostly used from REPL
**** =*ns*= var refers to current namespace
**** =ns= macro a convenience for authoring source files

*** Referring Vars                                          :fixnowrap:slide:
**** Vars from other namespaces can be mapped in
**** =refer= does this
**** Can pull them in selectively via =:only= or =:exclude=

*** Referring Vars                                                    :slide:
#+begin_src clojure
  (ns some.where)

  ;; Refer all public vars
  (refer 'net.cgrand.enlive-html)

  ;; No namespace required!
  (render ...)

  ;; Refer only foo and bar
  (refer '[blah.whatever :only (foo bar)])

  ;; Refer everything except defroutes and GET
  (refer '[compojure.core :except (defroutes GET)])
#+end_src

*** How are Symbols Evaluated?                              :fixnowrap:slide:

file:SymbolResolution.png

- When symbol evaluates to var, var evaluates to value
  - This can make the code faster

# Question: how do you tell the difference between a.b/c being a
# namespace-qualified symbol referencing a var and a static method
# invocation on a Java class?
#
# Answer: I spent some time digging down on this, and the answer is
# that the compiler handles it somehow. You can define a namespace
# like Integer, and intern a var parseInt in it, and if you refer the
# namespace, you can use Integer/parseInt to call it - the Java method
# is shadowed. However, you can't define a Clojure namespace called
# java.lang.Integer - it's explicitly disallowed. Further, when I
# tried it, doing so horked up the REPL so badly I had to kill it.

*** COMMENT How are Symbols Evaluated?                                :slide:
**** Does it have a namespace?
***** Resolve to the var in that namespace
**** Does it look like =some.package.class=?
***** Resolve to that Java class
**** Symbol with no namespace
***** Is it special form?
****** Handled specially by the compiler
***** Is it an imported Java class?
****** Resolve to that class
***** Is it a local binding?
****** Resolve to that local
***** Is it interned in the current namespace?
****** Resolve to that var


*** The Code Again                                                    :slide:

# At this point we should come back to the original code and show that
# we understand everything that's going on in it.

#+begin_src clojure
  (ns hello
    (:require [clojure.string :as str]))

  (defn -main [& args]
    (println "hello" (str/join " and " args)))
#+end_src

*** =ns=                                                              :slide:

#+begin_src clojure
  (ns foo.bar
    (:refer-clojure :exclude [ancestors printf])
    (:require (clojure test test.junit))
    (:use (my.lib this that))
    (:import (java.util Date Timer Random)
             java.sql.Connection))
#+end_src

* Fin                                                           :title:slide:

** Bonus Material                                               :title:slide:

*** Using vars                                                        :slide:

- Passing function by name passes function object
- If you want to change it later, you're out of luck
- Can pass the var instead
- Use =var= to do this
- Can also use var-quote #'

*** Using vars                                                        :slide:
#+begin_src clojure
  (ns hello-world
    (:use compojure.core, ring.adapter.jetty))

  (defroutes main-routes ...)

  ;; Can't update routes dynamically
  (run-jetty main-routes {:port 8080})

  ;; Unless we do this
  (run-jetty (var main-routes) {:port 8080})

  ;; Which is the same as this
  (run-jetty #'main-routes {:port 8080})
#+end_src

*** =resolve=                                                         :slide:

- You can look up vars at runtime with =resolve=
- Handy for resolving circular dependencies
  - Usually better to refactor code instead

*** Circular Dependencies                                   :fixnowrap:slide:

#+begin_src clojure
  ;; This won't work
  (ns one
    (:require two))

  (ns two
    (:require one))
#+end_src

*** Circular Dependencies                                   :fixnowrap:slide:

#+begin_src clojure
  (ns one)

  (defn a []
    (require 'two)
    ((resolve 'two/b)))
#+end_src

#+begin_src clojure
  (ns two (:require one))

  (defn b [] "It worked!")

  (defn c [] (one/a))
#+end_src

#+TAGS: slide(s) title

#+STYLE: <link rel="stylesheet" type="text/css" href="common.css" />
#+STYLE: <link rel="stylesheet" type="text/css" href="screen.css" media="screen" />
#+STYLE: <link rel="stylesheet" type="text/css" href="projection.css" media="projection" />
#+STYLE: <link rel="stylesheet" type="text/css" href="presenter.css" media="presenter" />
#+STYLE: <link rel="stylesheet" type="text/css" href="local.css" />

#+BEGIN_HTML
<script type="text/javascript" src="org-html-slides.js"></script>
#+END_HTML

# Local Variables:
# org-export-html-style-include-default: nil
# org-export-html-style-include-scripts: nil
# End:



** Notes
**** Should do more detail on the namespace mappings
**** What's the motivation for people with a bit more experience?
- Could talk more about how to use vars directly
  - E.g. In compojure when you pass the var rather than the symbol
- Two things that nobody understands
  - The compojure trick
  - Crufting up a var to work around cyclic dependencies

((var ns name) blah)


